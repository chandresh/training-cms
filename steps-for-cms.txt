1) Choose a free template

from http://www.templatemo.com

2) create a new project (rails new cms)

3) git init

4) add it to Github // create an account if you need to

5) Send me your Github repo link

https://github.com/orlybg/minicms
https://github.com/mikekhd/shiny-nemesis.git
https://github.com/EvgeniiS/Practice.git
https://github.com/krison44/ruby_cms
https://github.com/JPGMX/gitproject
https://github.com/osmarmon32/test-cms

6) use the template:
-> delete public/index.html
-> create a controller pages & action home:
	rails g controller pages home
-> add the html from the template (only the part between <body></body>) to your layouts/application.html.erb . Important: keep the head part as it was.
-> convert <img src>'s to <%= image_tag "image.jpg" %>
-> copy the stylesheet to assets. Rename to .scss (e.g. style.css.scss)
-> Change the images from: 
background: url(images/img02.gif) to background: url("img02.gif")

7) create a pages model/scaffold

8) use friendly_id v 4

-> gem install friendly_id
-> Add  gem "friendly_id" to Gemfile
-> bundle install
-> rails g friendly_id
-> rails g migration add_slug_to_pages slug
-> rake db:migrate
-> Add to model: page.rb

		extend FriendlyId
		friendly_id :name, use: [:slugged, :history]

-> restart the server

9) Add Basic Authentication:

Add this line to pages_controller.rb

http_basic_authenticate_with :name => "admin", :password => "secret", :except => [:show, :home]

10) Make urls like: localhost:3000/about instead of localhost:3000/pages/about

Add this at the bottom of routes.rb:

get "/:id" => 'pages#show'

11) Create links in layout:

<%= link_to "About", page_path(:about) %>

12) Add an admin page

13) Create Partials to keep things like header, footer, menu, sidebar
etc.

14) Show all the pages on the homepage.

15) Contact scaffold

16) link to contact in the menu

17) Add contact to admin

18) Add boolean field for featured:

rails g migration add_featured_to_pages featured:boolean
rake db:migrate

19) Created a class method in Page model:

def self.featured
    where(featured: true)
  end

20) Used the class method to get featured posts in pages controller action:

def home
    @pages = Page.featured
  end

###

21) Create authenticate method and use it in before_filter
	Use: authenticate_or_request_with_http_basic

22) Use sessions to store if an admin is logged in and use it to check if we should show the admin options like edit.
	Use: session[:admin]

23) scope instead of class methods.

24) Add title using:
	provide(:title)
	content_for?(:title)
	yield(:title)

25) Add simple_form gem (read from simple_form github page)

26) Create a new scaffold for category

27) Convert Pages form to simple_form

28) create association between category & pages

29) Use simple_form helper association to create a category drop-down in pages form.
	f.association	:category

30) Display pages based on category on the category show page.

31) Use partials to make the code dry: both at home as well as the category show page.

use special syntax to show the collection partial:

<%= render @pages %>

32) Show the pages on homepage based on category.

------------
- Please keep committing to git & pushing to Github.

git remote add origin https://github.com/your-username/repo-name.git
git push -u origin master
git add .
git commit -m "message"
git push
